# -*- coding: utf-8 -*-
"""Recommendation system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vqj-QvjGnL_LNgsIT9sdID69GJI2dpwA

Importing the dependencies
"""

import numpy as np
import pandas as pd
import difflib # The name of the movie from the user as an input data might be misspelled (get the closest match)
from sklearn.feature_extraction.text import TfidfVectorizer # convert the textual data into numerical values 
from sklearn.metrics.pairwise import cosine_similarity # to get the similarity score

"""Data collection and preprocessing"""

movies_data = pd.read_csv('/content/movies.csv')

movies_data.head()

movies_data.shape

"""Selecting the features """

selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

combined_features = movies_data[selected_features]
combined_features

for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

combined_features.shape # 5 columns

combined_features.isnull

combined_features.isnull().sum()

combined_features = movies_data['genres'] + movies_data['keywords'] + movies_data['tagline'] + movies_data['cast'] + movies_data['director'] 
combined_features[0]

combined_features.shape #one single column

for i in selected_features:
  movies_data[i] = movies_data[i].fillna('')
print(combined_features)

"""Converting each entity in the vector (movie details) to number (feature vector)"""

# converting the text data to feature vectors

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

feature_vectors.shape

"""Applying similarity score using cosine similarity algorithm """

similarity  =  cosine_similarity(feature_vectors)

similarity.shape

list_of_all_movies =  movies_data['original_title'].tolist()
print(list_of_all_movies)

"""Finding the perfect match for movie name given by the user (difflib libirary)"""

movie_name_by_user = input("Please enter a movie name: ")

find_close_match =  difflib.get_close_matches(movie_name_by_user , list_of_all_movies )
print(find_close_match)

close_match = find_close_match[0]

# finding the index of the movie with title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

print(feature_vectors)

similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)
len(similarity_score)

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 
print(sorted_similar_movies)

print("Movies suggested for you: ")
i =1
for x in sorted_similar_movies :
  index = x[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if (i<11):
    print(i, '.',title_from_index)
    i+=1

movie_name = input(' Enter your favourite movie name : ')
list_of_all_titles = movies_data['title'].tolist()
find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
close_match = find_close_match[0]
index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
similarity_score = list(enumerate(similarity[index_of_the_movie]))
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 
print('Movies suggested for you : \n')
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<11):
    print(i, '.',title_from_index)
    i+=1

